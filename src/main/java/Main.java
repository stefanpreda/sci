import algorithm.AES;
import algorithm.Blowfish;
import algorithm.RSA;
import algorithm.RandomString;
import algorithm.TripleDES;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.concurrent.Callable;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Main {
    public static void main(String[] args) {
        long startTime = 0;
        long endTime = 0;
        long timeSpent = 0;
        long totalTimeEncrypt = 0;
        long totalTimeDecrypt = 0;
        long initalExecutionTime = 0;
        float averageTimeEncrypt = 0;
        float averageTimeDecrypt = 0;
        byte[] encrypted = null;
        String encryptedString = null;
        String input = null;

        File directory = new File("output");
        if (! directory.exists())
            directory.mkdir();

        RandomString randomString = new RandomString(16);
        int runCount = 100;

        RSA rsa = new RSA();
        rsa.buildKeyPair();
        totalTimeEncrypt = 0;
        totalTimeDecrypt = 0;
        System.out.println("Running RSA test");

        input = randomString.nextString();
        startTime = System.currentTimeMillis();
        //RSA with 256 bytes key
        encrypted = rsa.runTestEncrypt(input);
        endTime = System.currentTimeMillis();
        initalExecutionTime = endTime - startTime;

        try {
            Files.write(new File("output/rsa.out").toPath(), encrypted);
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (int i = 0; i < runCount; i++) {
            input = randomString.nextString();

            startTime = System.currentTimeMillis();
            //RSA with 256 bytes key
            encrypted = rsa.runTestEncrypt(input);
            endTime = System.currentTimeMillis();
            timeSpent = endTime - startTime;
            totalTimeEncrypt += timeSpent;

            startTime = System.currentTimeMillis();
            //RSA with 256 bytes key
            rsa.runTestDecrypt(encrypted);
            endTime = System.currentTimeMillis();
            timeSpent = endTime - startTime;
            totalTimeDecrypt += timeSpent;
        }
        averageTimeEncrypt = (float)totalTimeEncrypt / runCount;
        averageTimeEncrypt = averageTimeEncrypt + (initalExecutionTime - averageTimeEncrypt);
        System.out.println("Average encrypt time spent: " + averageTimeEncrypt + "\n");
        averageTimeDecrypt = (float)totalTimeDecrypt / runCount;
        System.out.println("Average decrypt time spent: " + averageTimeDecrypt + "\n");

        AES aes = new AES();
        aes.setKey();
        totalTimeEncrypt = 0;
        totalTimeDecrypt = 0;
        System.out.println("Running AES test");

        input = randomString.nextString();
        startTime = System.currentTimeMillis();
        //AES with 256 bytes key
        encrypted = aes.runTestEncrypt(input);
        endTime = System.currentTimeMillis();
        initalExecutionTime = endTime - startTime;

        try {
            Files.write(new File("output/aes.out").toPath(), encrypted);
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (int i = 0; i < runCount; i++) {
            input = randomString.nextString();

            startTime = System.currentTimeMillis();
            //AES with 256 bytes key
            encrypted = aes.runTestEncrypt(input);
            endTime = System.currentTimeMillis();
            timeSpent = endTime - startTime;
            totalTimeEncrypt += timeSpent;

            startTime = System.currentTimeMillis();
            //AES with 256 bytes key
            aes.runTestDecrypt(encrypted);
            endTime = System.currentTimeMillis();
            timeSpent = endTime - startTime;
            totalTimeDecrypt += timeSpent;
        }
        averageTimeEncrypt = (float)totalTimeEncrypt / runCount;
        averageTimeEncrypt = averageTimeEncrypt + (initalExecutionTime - averageTimeEncrypt);
        System.out.println("Average encrypt time spent: " + averageTimeEncrypt + "\n");
        averageTimeDecrypt = (float)totalTimeDecrypt / runCount;
        System.out.println("Average decrypt time spent: " + averageTimeDecrypt + "\n");

        Blowfish blowfish = new Blowfish();
        blowfish.setKey();
        totalTimeEncrypt = 0;
        totalTimeDecrypt = 0;
        System.out.println("Running Blowfish test");

        input = randomString.nextString();
        startTime = System.currentTimeMillis();
        //Blowfish with 256 bytes key
        encryptedString = blowfish.runTestEncrypt(input);
        endTime = System.currentTimeMillis();
        initalExecutionTime = endTime - startTime;

        try {
            Files.write(new File("output/blowfish.out").toPath(), encryptedString.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (int i = 0; i < runCount; i++) {
            input = randomString.nextString();

            startTime = System.currentTimeMillis();
            //Blowfish with 256 bytes key
            encryptedString = blowfish.runTestEncrypt(input);
            endTime = System.currentTimeMillis();
            timeSpent = endTime - startTime;
            totalTimeEncrypt += timeSpent;

            startTime = System.currentTimeMillis();
            //Blowfish with 256 bytes key
            blowfish.runTestDecrypt(encryptedString);
            endTime = System.currentTimeMillis();
            timeSpent = endTime - startTime;
            totalTimeDecrypt += timeSpent;
        }
        averageTimeEncrypt = (float)totalTimeEncrypt / runCount;
        averageTimeEncrypt = averageTimeEncrypt + (initalExecutionTime - averageTimeEncrypt);
        System.out.println("Average encrypt time spent: " + averageTimeEncrypt + "\n");
        averageTimeDecrypt = (float)totalTimeDecrypt / runCount;
        System.out.println("Average decrypt time spent: " + averageTimeDecrypt + "\n");

        TripleDES tripleDES = new TripleDES();
        tripleDES.setKey();
        totalTimeEncrypt = 0;
        totalTimeDecrypt = 0;
        System.out.println("Running TripleDES test");

        input = randomString.nextString();
        startTime = System.currentTimeMillis();
        //tripleDES with 256 bytes key
        encrypted = tripleDES.runTestEncrypt(input);
        endTime = System.currentTimeMillis();
        initalExecutionTime = endTime - startTime;

        try {
            Files.write(new File("output/tdes.out").toPath(), encrypted);
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (int i = 0; i < runCount; i++) {
            input = randomString.nextString();

            startTime = System.currentTimeMillis();
            //TripleDES with 256 bytes key
            encrypted = tripleDES.runTestEncrypt(input);
            endTime = System.currentTimeMillis();
            timeSpent = endTime - startTime;
            totalTimeEncrypt += timeSpent;

            startTime = System.currentTimeMillis();
            //TripleDES with 256 bytes key
            tripleDES.runTestDecrypt(encrypted);
            endTime = System.currentTimeMillis();
            timeSpent = endTime - startTime;
            totalTimeDecrypt += timeSpent;
        }
        averageTimeEncrypt = (float)totalTimeEncrypt / runCount;
        averageTimeEncrypt = averageTimeEncrypt + (initalExecutionTime - averageTimeEncrypt);
        System.out.println("Average encrypt time spent: " + averageTimeEncrypt + "\n");
        averageTimeDecrypt = (float)totalTimeDecrypt / runCount;
        System.out.println("Average decrypt time spent: " + averageTimeDecrypt + "\n");
    }
}
